from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from bot.config import ADMINS, BOT_TOKEN
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database.models import add_product, get_all_products
import requests
from database.models import delete_product_by_title  
import httpx
import sqlite3

admin_router = Router()
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ 
def true_admin(user_id):
    return user_id in ADMINS
# –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–º–æ—â—å—é —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ pythonanywhere
def save_to_site(product):
    url = "https://darigii.pythonanywhere.com/add"
    try:
        response = requests.post(url, json=product)
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–∞–π—Ç:", response.status_code, response.text)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–∞–π—Ç:", e)

class AddProductFSM(StatesGroup):
    waiting_main_category = State()
    waiting_subcategory = State()
    waiting_name = State()
    waiting_price = State()
    waiting_image = State()
    confirm = State()

class DeleteFlow(StatesGroup):
    choosing_category = State()
    entering_subcategory = State()
    entering_name = State()
    confirming = State()

class EditFlow(StatesGroup):
    choosing_category = State()
    entering_subcategory = State()
    entering_name = State()
    choosing_field = State()
    entering_new_value = State()

class ViewFlow(StatesGroup):
    choosing_category = State()
    entering_subcategory = State()
    entering_name = State()

# –∫–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω
@admin_router.callback_query(F.data == "admin")
async def admin_panel(callback: CallbackQuery):
    if not true_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add")],
        [InlineKeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_edit")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_delete")],
        [InlineKeyboardButton(text="üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_view")]
    ])
    await callback.message.answer("üë©‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_keyboard)
    await callback.answer()
# –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ 
@admin_router.callback_query(F.data == "admin_add")
async def add_product_start(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçú –ï–¥–∞", callback_data="cat_–ï–¥–∞")],
        [InlineKeyboardButton(text="üç™ –°–ª–∞–¥–æ—Å—Ç–∏ –∏ —Å–Ω–µ–∫–∏", callback_data="cat_–°–ª–∞–¥–æ—Å—Ç–∏ –∏ —Å–Ω–µ–∫–∏")],
        [InlineKeyboardButton(text="üßã –ù–∞–ø–∏—Ç–∫–∏", callback_data="cat_–ù–∞–ø–∏—Ç–∫–∏")],
        [InlineKeyboardButton(text="üß¥ –ö–æ—Å–º–µ—Ç–∏–∫–∞", callback_data="cat_–ö–æ—Å–º–µ—Ç–∏–∫–∞")],
        [InlineKeyboardButton(text="üëö –û–¥–µ–∂–¥–∞", callback_data="cat_–û–¥–µ–∂–¥–∞")],
        [InlineKeyboardButton(text="üéµ –ê–ª—å–±–æ–º—ã", callback_data="cat_–ê–ª—å–±–æ–º—ã")],
        [InlineKeyboardButton(text="üì¶ –ü—Ä–æ—á–µ–µ", callback_data="cat_–ü—Ä–æ—á–µ–µ")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)
    await state.set_state(AddProductFSM.waiting_main_category)
    await callback.answer()
# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
@admin_router.callback_query(F.data.startswith("cat_"))
async def process_main_category(callback: CallbackQuery, state: FSMContext):
    main_category = callback.data.split("_")[1]
    await state.update_data(main_category=main_category)
    await state.set_state(AddProductFSM.waiting_subcategory)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–∞–º—ë–Ω):")
    await callback.answer()
# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º  –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@admin_router.message(AddProductFSM.waiting_subcategory)
async def process_subcategory(message: Message, state: FSMContext):
    await state.update_data(subcategory=message.text)
    await state.set_state(AddProductFSM.waiting_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@admin_router.message(AddProductFSM.waiting_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddProductFSM.waiting_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ (—Ü–µ–Ω–∞), –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ
@admin_router.message(AddProductFSM.waiting_price)
async def process_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
    except ValueError:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Ü–µ–Ω—É)")
        return
    await state.update_data(price=price)
    await state.set_state(AddProductFSM.waiting_image)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ñ–æ—Ç–æ):")
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–∞–π—Ç
@admin_router.message(AddProductFSM.waiting_image, F.photo)
async def process_image(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    bot = Bot(token=BOT_TOKEN)
    file = await bot.get_file(file_id)
    image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
    await state.update_data(image_url=image_url)
    await state.update_data(image_file_id=file_id)
    data = await state.get_data()
    preview_text = (
        f"üì¶ <b>{data['name']}</b>\n"
        f"üí≤ <b>{data['price']}‚ÇΩ</b>\n"
        f"üóÇ <b>{data['main_category']} > {data['subcategory']}</b>\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    )
    confirm_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_add"),
         InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add")]
    ])
    await message.answer_photo(photo=file_id, caption=preview_text, parse_mode="HTML", reply_markup=confirm_markup)
    await state.set_state(AddProductFSM.confirm)

@admin_router.callback_query(F.data == "confirm_add")
async def confirm_add_product(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    add_product(
        name=data["name"],
        price=data["price"],
        image_url=data["image_url"],
        file_id=data["image_file_id"],
        category=f"{data['main_category'].strip()} > {data['subcategory'].strip()}"
    )

    save_to_site({
        "name": data["name"],
        "price": data["price"],
        "image_url": data["image_url"],
        "file_id": data["image_file_id"],  
        "category": data["main_category"],
        "subcategory": data["subcategory"]
    })
    await callback.message.edit_caption("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∏ –Ω–∞ —Å–∞–π—Ç.") # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å 
    await state.clear()
    await callback.answer()
#  —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è 
@admin_router.callback_query(F.data == "cancel_add")
async def cancel_add_product(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_caption("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()
# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
@admin_router.callback_query(F.data == "admin_delete")
async def start_deleting(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=cat, callback_data=f"del_cat_{cat}")]
                for cat in ["–ï–¥–∞", "–°–ª–∞–¥–æ—Å—Ç–∏ –∏ —Å–Ω–µ–∫–∏", "–ù–∞–ø–∏—Ç–∫–∏", "–ö–æ—Å–º–µ—Ç–∏–∫–∞", "–û–¥–µ–∂–¥–∞", "–ê–ª—å–±–æ–º—ã", "–ü—Ä–æ—á–µ–µ"]
            ]
        )
    )
    await state.set_state(DeleteFlow.choosing_category)
    await callback.answer()
# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º  –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@admin_router.callback_query(DeleteFlow.choosing_category, F.data.startswith("del_cat_"))
async def choose_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.replace("del_cat_", "")
    await state.update_data(category=category)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    await state.set_state(DeleteFlow.entering_subcategory)
    await callback.answer()

@admin_router.message(DeleteFlow.entering_subcategory)
async def get_subcategory(message: Message, state: FSMContext):
    await state.update_data(subcategory=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(DeleteFlow.entering_name)
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ 
@admin_router.message(DeleteFlow.entering_name)
async def confirm_deletion(message: Message, state: FSMContext):
    data = await state.get_data()
    category = f"{data['category']} > {data['subcategory']}"
    name = message.text
    for prod in get_all_products():
        pid, pname, price, url, file_id, cat = prod
        if pname.lower() == name.lower() and cat == category:
            await state.update_data(
                to_delete_id=pid,
                to_delete_title=pname  
            )
            text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä:\n<b>{pname}</b>\nüí∞ {price}‚ÇΩ\nüóÇ {cat}"
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
            ])
            try:
                await message.answer_photo(photo=file_id, caption=text, parse_mode="HTML", reply_markup=markup)
            except:
                await message.answer(text, parse_mode="HTML", reply_markup=markup)
            await state.set_state(DeleteFlow.confirming)
            return
    await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 
@admin_router.callback_query(DeleteFlow.confirming, F.data == "confirm_delete")
async def do_delete(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_title = data["to_delete_title"]
    delete_product_by_title(product_title)
    async with httpx.AsyncClient() as client:
        res = await client.post(
            "https://darigii.pythonanywhere.com/delete",
            json={"title": product_title}
        )
    if res.status_code == 200 and res.json().get("success"):
        await callback.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{product_title}¬ª —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –∏ —Å —Å–∞–π—Ç–∞.")
    else:
        await callback.message.answer("–ù–∞ —Å–∞–π—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

@admin_router.callback_query(DeleteFlow.confirming, F.data == "cancel_delete")
async def cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ 
@admin_router.callback_query(F.data == "admin_edit")
async def start_edit(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat, callback_data=f"edit_cat:{cat}")]
        for cat in ["üçú –ï–¥–∞", "üç™ –°–ª–∞–¥–æ—Å—Ç–∏ –∏ —Å–Ω–µ–∫–∏", "üßã –ù–∞–ø–∏—Ç–∫–∏", "üß¥ –ö–æ—Å–º–µ—Ç–∏–∫–∞", "üëö –û–¥–µ–∂–¥–∞", "üéµ –ê–ª—å–±–æ–º—ã", "üì¶ –ü—Ä–æ—á–µ–µ"]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await state.set_state(EditFlow.choosing_category)
    await callback.answer()
# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º  –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@admin_router.callback_query(EditFlow.choosing_category, F.data.startswith("edit_cat:"))
async def handle_edit_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("edit_cat:")[1]
    await state.update_data(category=category)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    await state.set_state(EditFlow.entering_subcategory)
    await callback.answer()

@admin_router.message(EditFlow.entering_subcategory)
async def enter_name_to_edit(message: Message, state: FSMContext):
    await state.update_data(subcategory=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    await state.set_state(EditFlow.entering_name)

@admin_router.message(EditFlow.entering_name)
async def choose_edit_field(message: Message, state: FSMContext):
    await state.update_data(product_name=message.text.strip())
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field:name")],
        [InlineKeyboardButton(text="–¶–µ–Ω–∞", callback_data="edit_field:price")],
        [InlineKeyboardButton(text="–§–æ—Ç–æ", callback_data="edit_field:image")]
    ])
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    await state.set_state(EditFlow.choosing_field)

@admin_router.callback_query(EditFlow.choosing_field, F.data.startswith("edit_field:"))
async def enter_new_value(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split(":")[1]
    await state.update_data(field_to_edit=field)
    if field == "image":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    elif field == "price":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
    else:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await callback.answer()
    await state.set_state(EditFlow.entering_new_value)
# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ
@admin_router.message(EditFlow.entering_new_value)
async def apply_edit(message: Message, state: FSMContext):
    data = await state.get_data()
    field = data["field_to_edit"]
    old_title = data["product_name"]
    category = f"{data['category']} > {data['subcategory']}"
    if field == "image":
        if not message.photo:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return
        file_id = message.photo[-1].file_id
        bot = Bot(token=BOT_TOKEN)
        file = await bot.get_file(file_id)
        image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
        with sqlite3.connect("database/db.sqlite3") as conn:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE products SET file_id = ?, image_url = ? WHERE name = ? AND category = ?",
                (file_id, image_url, old_title, category)
            )
            conn.commit()
        async with httpx.AsyncClient() as client:
            res = await client.post(
                "https://darigii.pythonanywhere.com/update_product",
                json={
                    "title": old_title,
                    "category": category,
                    "image_url": image_url,
                    "file_id": file_id
                }
            )

    else:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ 
        new_value = message.text.strip()
        if field == "price" and not new_value.isdigit():
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        with sqlite3.connect("database/db.sqlite3") as conn:
            cursor = conn.cursor()
            cursor.execute(
                f"UPDATE products SET {field} = ? WHERE name = ? AND category = ?",
                (new_value, old_title, category)
            )
            conn.commit()
        async with httpx.AsyncClient() as client:
            res = await client.post(
                "https://darigii.pythonanywhere.com/update_product",
                json={
                    "title": old_title,
                    "category": category,
                    "field": field,
                    "new_value": new_value
                }
            )
    if res.status_code == 200 and res.json().get("success"):
        await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –±–∞–∑–µ –∏ –Ω–∞ —Å–∞–π—Ç–µ.")
    else:
        await message.answer("‚ö†Ô∏è –í –±–∞–∑–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –Ω–∞ —Å–∞–π—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")

    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
@admin_router.callback_query(F.data == "admin_view")
async def start_viewing(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat, callback_data=f"view_cat:{cat}")]
        for cat in ["üçú –ï–¥–∞", "üç™ –°–ª–∞–¥–æ—Å—Ç–∏ –∏ —Å–Ω–µ–∫–∏", "üßã –ù–∞–ø–∏—Ç–∫–∏", "üß¥ –ö–æ—Å–º–µ—Ç–∏–∫–∞", "üëö –û–¥–µ–∂–¥–∞", "üéµ –ê–ª—å–±–æ–º—ã", "üì¶ –ü—Ä–æ—á–µ–µ"]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await state.set_state(ViewFlow.choosing_category)
    await callback.answer()
# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º  –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@admin_router.callback_query(ViewFlow.choosing_category, F.data.startswith("view_cat:"))
async def view_choose_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("view_cat:")[1]
    await state.update_data(category=category)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    await state.set_state(ViewFlow.entering_subcategory)
    await callback.answer()

@admin_router.message(ViewFlow.entering_subcategory)
async def view_subcategory(message: Message, state: FSMContext):
    await state.update_data(subcategory=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ViewFlow.entering_name)
# –±–µ—Ä–µ–º —Ç–æ–≤–∞—Ä —Å —Å–∞–π—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 
@admin_router.message(ViewFlow.entering_name)
async def view_product_info(message: Message, state: FSMContext):
    data = await state.get_data()
    category = f"{data['category']} > {data['subcategory']}"
    title = message.text.strip()
    async with httpx.AsyncClient() as client:
        try:
            res = await client.get("https://darigii.pythonanywhere.com/products")
            products_data = res.json()
        except Exception as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞.")
            await state.clear()
            return
    # –ò—â–µ–º –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä
    product = None
    cat_data = products_data.get(data['category'], {}).get(data['subcategory'], [])
    for item in cat_data:
        if item["name"].lower() == title.lower():
            product = item
            break
    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    caption = (
        f"üì¶ <b>{product['name']}</b>\n"
        f"üí∞ <b>{product['price']}‚ÇΩ</b>\n"
        f"üóÇ <b>{category}</b>"
    )
    try:
        file_id = product.get("file_id", "")
        if file_id:
            await message.answer_photo(
                photo=file_id,
                caption=caption,
                parse_mode="HTML"
            )
        else:
            raise ValueError("no image")
    except Exception:
        await message.answer("–£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n" + caption, parse_mode="HTML")
    await state.clear()
