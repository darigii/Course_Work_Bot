from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database.models import get_user_by_telegram_id, register_user, save_email_to_user
import re

registration_router = Router()

class EmailFSM(StatesGroup):
    waiting_for_email = State()
@registration_router.callback_query(F.data == "register")
async def handle_register_callback(callback: CallbackQuery, state: FSMContext):
    user = get_user_by_telegram_id(callback.from_user.id)
    if user:
        await callback.message.edit_text("üìå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º", web_app=WebAppInfo(url="https://lambent-tartufo-95748f.netlify.app/"))],
        [InlineKeyboardButton(text=" –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]])
        await callback.message.answer("üì¶ –í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥:", reply_markup=menu)
        await callback.answer()
    else:
        register_user(callback.from_user.id, callback.from_user.full_name)
        await callback.message.edit_text("üì© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π:")
        await state.set_state(EmailFSM.waiting_for_email)
    await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n")

@registration_router.message(EmailFSM.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip()
    valid_tlds = {"ru", "com", "net", "org", "edu", "gov", "info", "biz", "ua", "kz"}
    match = re.fullmatch(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.(\w{2,})", email)
    if not match:
        await message.answer("E-mail –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º. –ü—Ä–∏–º–µ—Ä: example@mail.ru")
        return
    
    tld = match.group(1)
    if tld not in valid_tlds:
        await message.answer(f" –î–æ–º–µ–Ω '.{tld}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, .ru –∏–ª–∏ .com.")
        return
    
    save_email_to_user(message.from_user.id, email)

    await state.clear()
    menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º", web_app=WebAppInfo(url="https://lambent-tartufo-95748f.netlify.app/"))],
        [InlineKeyboardButton(text=" –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]])
    await message.answer("üì¨ E-mail —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥:", reply_markup=menu)

@registration_router.callback_query(F.data == "skip_registration")
async def handle_skip_registration(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ö–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏–∂–µ üëá")
    menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º", web_app=WebAppInfo(url="https://lambent-tartufo-95748f.netlify.app/"))],
        [InlineKeyboardButton(text=" –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]])
    await callback.message.answer("üì¶ –í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥:", reply_markup=menu)
    await callback.answer()
